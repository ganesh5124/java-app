pipeline {
    agent any
    
    tools {
      maven 'maven3.9.8'
    }

    stages {
        stage('Checkout') {
        environment {
          GIT_REPO_NAME = "java-app"
          GIT_USER_NAME = "ganesh5124"
          SONAR_URL = 'http://52.66.238.60:9000'
          SONAR_TOKEN = 'squ_07c19e2563895b969f5ce50e2eb92d71295136ce'
        }
            steps {
                script {
                    // removing any java-app repo exists
                    sh 'rm -rf java-app'
                    // Use the withCredentials block to bind the secret text to an environment variable
                    withCredentials([string(credentialsId: 'my-git-secret-text', variable: 'GIT_TOKEN')]) {
                        // Checkout the repository using the secret text
                        sh 'git clone https://${GIT_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git'
                    }
                }
            }
        }
        stage('SonarQube Scan') {
          steps {
              echo 'Scanning project'
                // List directory contents for debugging purposes
                sh 'ls -ltr'
                // Run SonarQube scan with specified SonarQube server and login token
                sh '''cd java-app 
                     mvn sonar:sonar \\
                    -Dsonar.host.url=${SONAR_URL} \\
                    -Dsonar.login=${SONAR_TOKEN}'''
              }
        }
        stage('Generating artifact with maven build tool'){
            steps {
                echo "generating artifact with maven build tool"
                sh 'cd java-app && mvn clean install'
            }
        }
        stage('Build Artifact') {
          steps {
              echo 'Build Artifact'
              // Clean and package the project using Maven
              // 1
              sh 'cd java-app && mvn clean package'
              }
        }
        
        stage('Build Docker Image') {
          steps {
              echo 'Build Docker Image'
                // Build the Docker image using the Dockerfile in the project
                // Tag the image with the current build number
              sh 'cd java-app && docker build -t ganesh5124/docker-apps:${BUILD_NUMBER} .'
            }
        }
    
    stage('Docker Image Scan'){
      steps{
sh "trivy image devopshubg333/k8s:${BUILD_NUMBER}"
      }
    }
        stage('Push to Docker Hub') {
          steps {
            script {
              // Use Dockerhub credentials to access Docker Hub
              withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub')]) {
                  sh 'docker login -u ganesh5124 -p ${dockerhub}'
              }
              // Push the Docker image to Docker Hub
              sh 'docker push ganesh5124/docker-apps:${BUILD_NUMBER}'
              
                echo 'Pushed to Docker Hub'
            }
          }
        }
        stage('Update Deployment File') {
        steps {
            echo 'Update Deployment File'
             // Use github-token to access GitHub
             withCredentials([string(credentialsId: 'my-git-secret-text', variable: 'githubtoken')]) {
                 echo "came here git credentials block"
             sh '''
                    # Configure git user
                    git config --global user.email "pvgkumar2001@gmail.com"
                    git config --global user.name "ganesh5124"
                    cd java-app
                    # Replace the tag in the deployment YAML file with the current build number
                    sed -i "s/docker-apps:.*/docker-apps:${BUILD_NUMBER}/g" manifestfiles/deployment.yaml
                    # Stage all changes
                    git add .
            
                    # Commit changes with a message containing the build number
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    echo ${githubtoken}
                    # Push changes to the main branch of the GitHub repository
                    git push https://${githubtoken}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
        '''
            }
}
    }
}
}
